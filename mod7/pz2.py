'''Есть список из 10 элементов, заполненный случайными числами. Необходимо найти число, введенное
пользователем. Используйте алгоритм линейного поиска.
'''
# import random

# def linear_search(lst, target):
#     for i in range(len(lst)):
#         if lst[i] == target:
#             return i
#     return -1

# # Генерируем список из 10 случайных чисел от 1 до 100.
#  = random.sample(range(1, 101), 10)

# print("Сгенерированный список: ", numbers)

# # Запрашиваем ввод числа от пользователя
# target = int(input("Введите число для поиска: "))

# # Применяем линейный поиск
# index = linear_search(numbers, target)

# # Выводим результат
# if index != -1:
#     print("Число {} найдено на позиции {}.".format(target, index))
# else:
#     print("Число {} не найдено в списке.".format(target))


'''Есть список из 10 элементов, заполненный случайными числами. Необходимо найти число, введенное
пользователем. Используйте алгоритм бинарного поиска.'''
# import random

# def binary_search(lst, target):
#     left = 0
#     right = len(lst) - 1
#     while left <= right:
#         middle = (left + right) // 2
#         if lst[middle] == target:
#             return middle
#         elif lst[middle] < target:
#             left = middle + 1
#         else:
#             right = middle - 1
#     return -1

# # Генерируем отсортированный список из 10 случайных чисел от 1 до 100.
# numbers = sorted(random.sample(range(1, 101), 10))

# print("Сгенерированный отсортированный список: ", numbers)

# # Запрашиваем ввод числа от пользователя
# target = int(input("Введите число для поиска: "))

# # Применяем бинарный поиск
# index = binary_search(numbers, target)

# # Выводим результат
# if index != -1:
#     print("Число {} найдено на позиции {}.".format(target, index))
# else:
#     print("Число {} не найдено в списке.".format(target))


'''Марсоход берёт пробы грунта, определяет тип горных пород и записывает полученные данные в отсортированный массив. Каждый тип горной породы обозначается целым числом.

Массив отсортирован в порядке возрастания: значения идут от меньшего к большему. В массиве могут быть дублирующиеся значения, ведь в разных пробах могут встречаться одни и те же горные породы.

Ваша задача — написать программу, удаляющую дубликаты из этого массива: каждый элемент должен встречаться в массиве только один раз. При этом относительный порядок элементов должен остаться прежним.

Дублирующие значения нужно заменить на символ подчёркивания.

После выполнения преобразований массив должен остаться такого же размера, как и был. В начале массива должны находиться уникальные элементы, а после них — элементы, содержащие символ подчёркивания. Эти элементы должны быть строго в конце массива, не между числами.


Формат ввода
В первой строке записано целое число n — это длина массива, переданного во второй строке.
Во второй строке записано n натуральных чисел, разделённых пробелами.

ПРимер:
Ввод:                   Вывод:
3                       1 2 _
1 1 2

10
0 0 1 1 1 2 2 3 3 4     0 1 2 3 4 _ _ _ _ _


'''

# num = int(input())
# spis = input().split(' ')
# def main(): 
#     unique = []
#     duplicates = []
#     for value in spis: 
#         if value not in unique:
#             unique.append(value) 
#         else: 
#             duplicates.append("_") 
            
#     result = unique + duplicates
#     print(' '.join(result))

# if __name__ == "__main__": 
#     main()
