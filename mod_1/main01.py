
# Программы состоят из множества строк с командами на Python, которые выполняются последовательно.

# import this
# "Дзен Питона" - рекомендации по созданию красивого и понятного кода.
# Красивое лучше, чем уродливое.
# Явное лучше, чем неявное.
# Простое лучше, чем сложное.
# Сложное лучше, чем запутанное.
# Плоское лучше, чем вложенное.
# Разреженное лучше, чем плотное.
# Читаемость имеет значение.
# Особые случаи не настолько особые, чтобы нарушать правила.
# При этом практичность важнее безупречности.
# Ошибка никогда не должна замалчиваться.
# Если только вы сами этого не захотите.
# Встретив двусмысленность, отбрось искушение угадать.
# Должен существовать один и, желательно, только один очевидный способ сделать что-то.
# Хотя он поначалу может быть и не очевиден, если вы не голландец.
# Сейчас лучше, чем никогда.
# Хотя никогда зачастую лучше, чем прямо сейчас.
# Если реализацию сложно объяснить — идея плоха.
# Если реализацию легко объяснить — идея, возможно, хороша.
# Пространства имён — отличная штука! Будем делать их больше!



# Переменная работает как подписанная коробка или помеченная ячейка, куда можно что-то положить и не потерять.
# Когда в коде впервые пишут имя переменной, это называется объявление переменной. Имя придумывает сам программист. 
# В Python переменную объявляют, присваивая ей какое-нибудь значение. Для объявления переменной надо указать имя, поставить знак «равно» = и написать значение, которое будет храниться в переменной.



# Типы данных
# int - целые числа (integer)
# float - вещественные числа (floating point number)
# str - строки (string)


# Со значениями разных типов Python работает по-разному. 

# Складывать числа и строки нельзя

# Операторы Python работают по-разному с разными типами данных.

# Строки можно умножать на целые числа с использованием оператора умножения (звездочка).

# Python позволяет преобразовывать значения переменных из одного типа в другой.
# Для преобразования числа в строку используется функция str(), а для преобразования строки в целое число - функция int().


# Изучение новой области знаний начинается с проб и ошибок.
# Python помогает найти ошибки, предоставляя информацию о проблеме.
# Ошибки синтаксиса: забыты скобки, кавычки, конец строки.
# Ошибки типов данных: строки и числа нельзя складывать.
# Разработчик тратит много времени на поиск и исправление ошибок.
# Важно относиться к ошибкам как к задаче, а не проблеме.
# Пишите код без опаски, так как в нём будут баги, которые вы отловите.
# print('a', 'b', 'c',  end='')

# number = int(input("Введите двухзначное число: "))
# res = number // 10
# res2 = number % 10
# print(res)
# print(res2)


# number = int(input("Введите трёхзначное число: "))
# res = number // 100
# res2 = (number % 100) // 10
# res3 = number % 10
# print(f"{res} {res2} {res3}")

c = float(input('Введите градусыы Цельсия'))
result = (c * 9/5) + 32
print(result)


def convert_to_hours_minutes_seconds(seconds):
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = (seconds %3600) % 60
    return hours, minutes, seconds

def time_to_midnight(current_time_in_seconds):
    time_to_midnight_in_seconds = 86400 - current_time_in_seconds
    return convert_to_hours_minutes_seconds(time_to_midnight_in_seconds)

current_time_in_seconds = int(input("Enter time in seconds: "))
hours, minutes, seconds = time_to_midnight(current_time_in_seconds)
print(f"There are {hours} hours, {minutes} minutes and {seconds} seconds until midnight.")