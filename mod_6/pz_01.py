'''
Реализуйте класс «Человек». Необходимо хранить в
полях класса: ФИО, дату рождения, контактный телефон,
город, страну, домашний адрес. Реализуйте методы класса
для ввода данных, вывода данных, реализуйте доступ к
отдельным полям через методы класса
'''

# class Human:
#     def __init__(self, full_name='', birth_date='', phone='', city='', country='', address=''):
#         self.full_name = full_name
#         self.birth_date = birth_date
#         self.phone = phone
#         self.city = city
#         self.country = country
#         self.address = address
    
#     def input_data(self):
#         self.full_name = input('Введите ФИО: ')
#         self.birth_date = input('Введите дату рождения: ')
#         self.phone = input('Введите контактный телефон: ')
#         self.city = input('Введите город: ')
#         self.country = input('Введите страну: ')
#         self.address = input('Введите домашний адрес: ')
    
#     def show_data(self):
#         print('ФИО: ', self.full_name)
#         print('Дата рождения: ', self.birth_date)
#         print('Телефон: ', self.phone)
#         print('Город: ', self.city)
#         print('Страна: ', self.country)
#         print('Домашний адрес: ', self.address)
        
#     def get_full_name(self):
#         return self.full_name
    
#     def get_birth_date(self):
#         return self.birth_date
    

# human = Human()

# human.input_data()

# human.show_data()

# human.get_birth_date()


'''Создайте класс «Дробь». Необходимо хранить в полях
класса: числитель и знаменатель. Реализуйте методы класса
для ввода данных, вывода данных, реализуйте доступ к
отдельным полям через методы класса. Также создайте
методы класса для выполнения арифметических операций (сложение, вычитание, умножение, деление, и т.д.).'''


class Дробь:
    def __init__(self, числитель=0, знаменатель=1):
        self.числитель = числитель
        self.знаменатель = знаменатель

    def ввод_данных(self):
        self.числитель = int(input("Введите числитель: "))
        self.знаменатель = int(input("Введите знаменатель: "))

    def вывод_данных(self):
        print(f"{self.числитель}/{self.знаменатель}")

    def get_числитель(self):
        return self.числитель

    def get_знаменатель(self):
        return self.знаменатель

    def сложение(self, другая_дробь):
        общий_знаменатель = self.знаменатель * другая_дробь.знаменатель
        общий_числитель = self.числитель * другая_дробь.знаменатель + другая_дробь.числитель * self.знаменатель
        результат = Дробь(общий_числитель, общий_знаменатель)
        return результат

    def вычитание(self, другая_дробь):
        общий_знаменатель = self.знаменатель * другая_дробь.знаменатель
        общий_числитель = self.числитель * другая_дробь.знаменатель - другая_дробь.числитель * self.знаменатель
        результат = Дробь(общий_числитель, общий_знаменатель)
        return результат

    def умножение(self, другая_дробь):
        общий_числитель = self.числитель * другая_дробь.числитель
        общий_знаменатель = self.знаменатель * другая_дробь.знаменатель
        результат = Дробь(общий_числитель, общий_знаменатель)
        return результат

    def деление(self, другая_дробь):
        общий_числитель = self.числитель * другая_дробь.знаменатель
        общий_знаменатель = self.знаменатель * другая_дробь.числитель
        результат = Дробь(общий_числитель, общий_знаменатель)
        return результат




'''
Создайте класс Soda (для определения типа газированной воды), принимающий 1 аргумент при инициализации (отвечающий за добавку к выбираемому лимонаду). В этом классе реализуйте метод show_my_drink(), выводящий на печать Газировка и {ДОБАВКА} в случае наличия добавки, а иначе отобразится следующая фраза: Обычная газировка.
'''


'''
Расширьте систему учёта отпусков, добавив новые атрибуты в класс Employee:
атрибут vacation_days со значением по умолчанию 28, который отражает, что у каждого сотрудника по умолчанию есть 28 дней отпуска;
атрибуты first_name, second_name и gender, которые отвечают за имя, фамилию и пол сотрудника соответственно; значения этих атрибутов должны устанавливаться при создании объектов.
Далее создайте два объекта класса Employee с различными значениями для first_name, second_name и gender и выведите на печать информацию о сотрудниках в таком виде: Имя: Роберт, Фамилия: Крузо, Пол: м, Отпускных дней в году: 28.. Для вывода на печать используйте f-строку.'''

# class Employee:
#     vacation_days = 28
    
#     def __init__(self, first_name, second_name, gender):
#         self.first_name = first_name
#         self.second_name = second_name
#         self.gender = gender

# # Создайте экземпляры класса Employee с различными значениями атрибутов.
# employee1 = Employee('Робер', 'Филиппо Густаво', 'м')
# employee2 = Employee('Анна', 'Фелиорни', 'ж')

# # Допишите код для вывода информации о сотрудниках.
# print(f'Имя: {employee1.first_name}, Фамилия: {employee1.second_name}, Пол: {employee1.gender}, Отпускных дней в году: {employee1.vacation_days}.')
# print(f'Имя: {employee2.first_name}, Фамилия: {employee2.second_name}, Пол: {employee2.gender}, Отпускных дней в году: {employee2.vacation_days}.')

'''
Добавьте в вашу систему учёта отпусков возможность узнавать, сколько дней отпуска осталось у того или иного сотрудника. 
Для этого дополните класс Employee следующими методами:
Метод consume_vacation должен отвечать за списание дней отпуска.

Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).

При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.

Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра remaining_vacation_days, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.
Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: Остаток отпускных дней: <число>..
Чтобы проверить работу программы:
Создайте экземпляр класса Employee.
Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.
Вызовите метод get_vacation_details.
'''